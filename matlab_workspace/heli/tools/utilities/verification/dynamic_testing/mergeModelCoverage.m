function mergeModelCoverage(modelName)
%mergeModelCoverage Merge coverage results of model
%   Merge coverage results from verifying the model against the high-level
%   software requirements and low-level tests generated by Design Verifier.
%
%   mergeModelCoverage(ModelName)

%   Copyright 2016 The MathWorks, Inc.

% Close all models.
bdclose('all');

% Capture useful folder/file paths and names.
testDir = fullfile(fileparts(which(modelName)), '..', 'verification', 'simulation_tests');
covDir = fullfile(fileparts(which(modelName)), '..', 'verification', 'model_coverages');
reqRslt = fullfile(testDir, 'high_level_tests', [modelName, '_REQ_Based_Test_Results.mldatx']);
sldvRslt = fullfile(testDir, 'low_level_tests', [modelName, '_SLDV_Based_Test_Results.mldatx']);

% Delete the old results and reports if they exist.
htmlFile = fullfile(covDir, [modelName, '_Merged_Model_Coverage_Report.html']);
if exist(htmlFile, 'file')
    delete(htmlFile);
end
gifDir = fullfile(covDir, 'scv_images');
if exist(gifDir, 'dir')
    rmdir(gifDir, 's');
end

% Bring the MATLAB Command Window into focus.
commandwindow;

% Check for prerequisites.
if ~exist(reqRslt, 'file')
    error(['Test results ''', modelName, '_REQ_Based_Test_Results.mldatx'' not found.']);
end
if ~exist(sldvRslt, 'file')
    error(['Test results ''', modelName, '_SLDV_Based_Test_Results.mldatx'' not found.']);
end

% Load test results into Test Manager.
sltest.testmanager.clear();
sltest.testmanager.clearResults();
sltest.testmanager.importResults(reqRslt);
sltest.testmanager.importResults(sldvRslt);
results = sltest.testmanager.getResultSets();

% Generate the coverage report.
covIdx = 0;
for i = 1:length(results)
    if ~isempty(results(i).CoverageResults)
        covIdx = covIdx + 1;
        covResults(covIdx) = cv.cvdatagroup(results(i).CoverageResults);
        %covResults(covIdx) = results(i).CoverageResults;
    end
end
if covIdx > 0
    cvStr = 'cvhtml(htmlFile';
    for i = 1:covIdx
        cvStr = [cvStr, ', covResults(', num2str(i), ')'];
    end
    cvStr = [cvStr, ');'];
    eval(cvStr);
%     cvhtml(htmlFile, covResults(:));
else
    warning('No coverage result.');
end

end
